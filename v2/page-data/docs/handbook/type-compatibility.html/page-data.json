{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/type-compatibility.html","result":{"data":{"markdownRemark":{"id":"527062ee-2017-5c71-b821-5beee473a97c","excerpt":"Introduction Type compatibility in TypeScript is based on structural subtyping.\nStructural typing is a way of relating types based solely on their members.\nThis…","html":"<h1 id=\"introduction\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h1>\n<p>Type compatibility in TypeScript is based on structural subtyping.\nStructural typing is a way of relating types based solely on their members.\nThis is in contrast with nominal typing.\nConsider the following code:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">interface</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Named</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    name</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">string</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Person</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    name</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">string</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">p</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Named</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #4C566A\">// OK, because of structural typing</span>\n<span style=\"color: #D8DEE9\">p</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">new</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Person</span><span style=\"color: #D8DEE9FF\">()</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>In nominally-typed languages like C# or Java, the equivalent code would be an error because the <code>Person</code> class does not explicitly describe itself as being an implementer of the <code>Named</code> interface.</p>\n<p>TypeScript’s structural type system was designed based on how JavaScript code is typically written.\nBecause JavaScript widely uses anonymous objects like function expressions and object literals, it’s much more natural to represent the kinds of relationships found in JavaScript libraries with a structural type system instead of a nominal one.</p>\n<h2 id=\"a-note-on-soundness\"><a href=\"#a-note-on-soundness\" aria-label=\"a note on soundness permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A Note on Soundness</h2>\n<p>TypeScript’s type system allows certain operations that can’t be known at compile-time to be safe. When a type system has this property, it is said to not be “sound”. The places where TypeScript allows unsound behavior were carefully considered, and throughout this document we’ll explain where these happen and the motivating scenarios behind them.</p>\n<h1 id=\"starting-out\"><a href=\"#starting-out\" aria-label=\"starting out permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Starting out</h1>\n<p>The basic rule for TypeScript’s structural type system is that <code>x</code> is compatible with <code>y</code> if <code>y</code> has at least the same members as <code>x</code>. For example:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">interface</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Named</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    name</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">string</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Named</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #4C566A\">// y's inferred type is { name: string; location: string; }</span>\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">y</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">name</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Alice</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">location</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Seattle</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">}</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">y</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>To check whether <code>y</code> can be assigned to <code>x</code>, the compiler checks each property of <code>x</code> to find a corresponding compatible property in <code>y</code>.\nIn this case, <code>y</code> must have a member called <code>name</code> that is a string. It does, so the assignment is allowed.</p>\n<p>The same rule for assignment is used when checking function call arguments:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">greet</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">n</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Named</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Hello, </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">n</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">name</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #88C0D0\">greet</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">y</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// OK</span></code></div></pre>\n<p>Note that <code>y</code> has an extra <code>location</code> property, but this does not create an error.\nOnly members of the target type (<code>Named</code> in this case) are considered when checking for compatibility.</p>\n<p>This comparison process proceeds recursively, exploring the type of each member and sub-member.</p>\n<h1 id=\"comparing-two-functions\"><a href=\"#comparing-two-functions\" aria-label=\"comparing two functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comparing two functions</h1>\n<p>While comparing primitive types and object types is relatively straightforward, the question of what kinds of functions should be considered compatible is a bit more involved.\nLet’s start with a basic example of two functions that differ only in their parameter lists:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">a</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">y</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">b</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">s</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">string</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #D8DEE9\">y</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// OK</span>\n<span style=\"color: #D8DEE9\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">y</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// Error</span></code></div></pre>\n<p>To check if <code>x</code> is assignable to <code>y</code>, we first look at the parameter list.\nEach parameter in <code>x</code> must have a corresponding parameter in <code>y</code> with a compatible type.\nNote that the names of the parameters are not considered, only their types.\nIn this case, every parameter of <code>x</code> has a corresponding compatible parameter in <code>y</code>, so the assignment is allowed.</p>\n<p>The second assignment is an error, because <code>y</code> has a required second parameter that <code>x</code> does not have, so the assignment is disallowed.</p>\n<p>You may be wondering why we allow ‘discarding’ parameters like in the example <code>y = x</code>.\nThe reason for this assignment to be allowed is that ignoring extra function parameters is actually quite common in JavaScript.\nFor example, <code>Array#forEach</code> provides three parameters to the callback function: the array element, its index, and the containing array.\nNevertheless, it’s very useful to provide a callback that only uses the first parameter:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">items</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> [</span><span style=\"color: #B48EAD\">1</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">2</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">3</span><span style=\"color: #D8DEE9FF\">]</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #4C566A\">// Don't force these extra parameters</span>\n<span style=\"color: #D8DEE9\">items</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">forEach</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">item</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">index</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">array</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">item</span><span style=\"color: #D8DEE9FF\">))</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #4C566A\">// Should be OK!</span>\n<span style=\"color: #D8DEE9\">items</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">forEach</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">item</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">item</span><span style=\"color: #D8DEE9FF\">))</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>Now let’s look at how return types are treated, using two functions that differ only by their return type:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> (</span><span style=\"color: #ECEFF4\">{</span><span style=\"color: #D8DEE9\">name</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Alice</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">}</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">y</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> (</span><span style=\"color: #ECEFF4\">{</span><span style=\"color: #D8DEE9\">name</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Alice</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">location</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Seattle</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">}</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #D8DEE9\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">y</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// OK</span>\n<span style=\"color: #D8DEE9\">y</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// Error, because x() lacks a location property</span></code></div></pre>\n<p>The type system enforces that the source function’s return type be a subtype of the target type’s return type.</p>\n<h2 id=\"function-parameter-bivariance\"><a href=\"#function-parameter-bivariance\" aria-label=\"function parameter bivariance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Parameter Bivariance</h2>\n<p>When comparing the types of function parameters, assignment succeeds if either the source parameter is assignable to the target parameter, or vice versa.\nThis is unsound because a caller might end up being given a function that takes a more specialized type, but invokes the function with a less specialized type.\nIn practice, this sort of error is rare, and allowing this enables many common JavaScript patterns. A brief example:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">EventType</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Mouse</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Keyboard</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">interface</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Event</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span><span style=\"color: #D8DEE9FF\"> timestamp</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #81A1C1\">interface</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">MouseEvent</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">extends</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Event</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span><span style=\"color: #D8DEE9FF\"> x</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> y</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #81A1C1\">interface</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">KeyEvent</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">extends</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Event</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span><span style=\"color: #D8DEE9FF\"> keyCode</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">listenEvent</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">eventType</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">EventType</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">handler</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">n</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Event</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">void</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #4C566A\">/* ... */</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #4C566A\">// Unsound, but useful and common</span>\n<span style=\"color: #88C0D0\">listenEvent</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">EventType</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">Mouse</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">e</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">MouseEvent</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">e</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">,</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">e</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">y</span><span style=\"color: #D8DEE9FF\">))</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #4C566A\">// Undesirable alternatives in presence of soundness</span>\n<span style=\"color: #88C0D0\">listenEvent</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">EventType</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">Mouse</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">e</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Event</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">((</span><span style=\"color: #D8DEE9\">e</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">as</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">MouseEvent</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">,</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> (</span><span style=\"color: #D8DEE9\">e</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">as</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">MouseEvent</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">y</span><span style=\"color: #D8DEE9FF\">))</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #88C0D0\">listenEvent</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">EventType</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">Mouse</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> (</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">e</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">MouseEvent</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">e</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">,</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">e</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">y</span><span style=\"color: #D8DEE9FF\">)) </span><span style=\"color: #81A1C1\">as</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">e</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Event</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">void</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #4C566A\">// Still disallowed (clear error). Type safety enforced for wholly incompatible types</span>\n<span style=\"color: #88C0D0\">listenEvent</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">EventType</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">Mouse</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">e</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">e</span><span style=\"color: #D8DEE9FF\">))</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>You can have TypeScript raise errors when this happens via the compiler flag <code>strictFunctionTypes</code>.</p>\n<h2 id=\"optional-parameters-and-rest-parameters\"><a href=\"#optional-parameters-and-rest-parameters\" aria-label=\"optional parameters and rest parameters permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Parameters and Rest Parameters</h2>\n<p>When comparing functions for compatibility, optional and required parameters are interchangeable.\nExtra optional parameters of the source type are not an error, and optional parameters of the target type without corresponding parameters in the source type are not an error.</p>\n<p>When a function has a rest parameter, it is treated as if it were an infinite series of optional parameters.</p>\n<p>This is unsound from a type system perspective, but from a runtime point of view the idea of an optional parameter is generally not well-enforced since passing <code>undefined</code> in that position is equivalent for most functions.</p>\n<p>The motivating example is the common pattern of a function that takes a callback and invokes it with some predictable (to the programmer) but unknown (to the type system) number of arguments:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">invokeLater</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">args</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">any</span><span style=\"color: #D8DEE9FF\">[]</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">callback</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #81A1C1\">...</span><span style=\"color: #D8DEE9\">args</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">any</span><span style=\"color: #D8DEE9FF\">[]</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">void</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #4C566A\">/* ... Invoke callback with 'args' ... */</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #4C566A\">// Unsound - invokeLater \"might\" provide any number of arguments</span>\n<span style=\"color: #88C0D0\">invokeLater</span><span style=\"color: #D8DEE9FF\">([</span><span style=\"color: #B48EAD\">1</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">2</span><span style=\"color: #D8DEE9FF\">]</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">y</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">, </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">y</span><span style=\"color: #D8DEE9FF\">))</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #4C566A\">// Confusing (x and y are actually required) and undiscoverable</span>\n<span style=\"color: #88C0D0\">invokeLater</span><span style=\"color: #D8DEE9FF\">([</span><span style=\"color: #B48EAD\">1</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">2</span><span style=\"color: #D8DEE9FF\">]</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #81A1C1\">?</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">y</span><span style=\"color: #81A1C1\">?</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">, </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">y</span><span style=\"color: #D8DEE9FF\">))</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<h2 id=\"functions-with-overloads\"><a href=\"#functions-with-overloads\" aria-label=\"functions with overloads permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions with overloads</h2>\n<p>When a function has overloads, each overload in the source type must be matched by a compatible signature on the target type.\nThis ensures that the target function can be called in all the same situations as the source function.</p>\n<h1 id=\"enums\"><a href=\"#enums\" aria-label=\"enums permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enums</h1>\n<p>Enums are compatible with numbers, and numbers are compatible with enums. Enum values from different enum types are considered incompatible. For example,</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Status</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Ready</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Waiting</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">}</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Color</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Red</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Blue</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Green</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">}</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">status</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Status</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">Ready</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9\">status</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Color</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">Green</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #4C566A\">// Error</span></code></div></pre>\n<h1 id=\"classes\"><a href=\"#classes\" aria-label=\"classes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Classes</h1>\n<p>Classes work similarly to object literal types and interfaces with one exception: they have both a static and an instance type.\nWhen comparing two objects of a class type, only members of the instance are compared.\nStatic members and constructors do not affect compatibility.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Animal</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    feet</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">constructor</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">name</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">string</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">numFeet</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Size</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    feet</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">constructor</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">numFeet</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">a</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Animal</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">s</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Size</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #D8DEE9\">a</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">s</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #4C566A\">// OK</span>\n<span style=\"color: #D8DEE9\">s</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">a</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #4C566A\">// OK</span></code></div></pre>\n<h2 id=\"private-and-protected-members-in-classes\"><a href=\"#private-and-protected-members-in-classes\" aria-label=\"private and protected members in classes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Private and protected members in classes</h2>\n<p>Private and protected members in a class affect their compatibility.\nWhen an instance of a class is checked for compatibility, if the target type contains a private member, then the source type must also contain a private member that originated from the same class.\nLikewise, the same applies for an instance with a protected member.\nThis allows a class to be assignment compatible with its super class, but <em>not</em> with classes from a different inheritance hierarchy which otherwise have the same shape.</p>\n<h1 id=\"generics\"><a href=\"#generics\" aria-label=\"generics permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generics</h1>\n<p>Because TypeScript is a structural type system, type parameters only affect the resulting type when consumed as part of the type of a member. For example,</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">interface</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Empty</span><span style=\"color: #ECEFF4\">&lt;</span><span style=\"color: #8FBCBB\">T</span><span style=\"color: #ECEFF4\">&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Empty</span><span style=\"color: #ECEFF4\">&lt;</span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #ECEFF4\">&gt;</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">y</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Empty</span><span style=\"color: #ECEFF4\">&lt;</span><span style=\"color: #8FBCBB\">string</span><span style=\"color: #ECEFF4\">&gt;</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #D8DEE9\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">y</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #4C566A\">// OK, because y matches structure of x</span></code></div></pre>\n<p>In the above, <code>x</code> and <code>y</code> are compatible because their structures do not use the type argument in a differentiating way.\nChanging this example by adding a member to <code>Empty&#x3C;T></code> shows how this works:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">interface</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">NotEmpty</span><span style=\"color: #ECEFF4\">&lt;</span><span style=\"color: #8FBCBB\">T</span><span style=\"color: #ECEFF4\">&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    data</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">T</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">NotEmpty</span><span style=\"color: #ECEFF4\">&lt;</span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #ECEFF4\">&gt;</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">y</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">NotEmpty</span><span style=\"color: #ECEFF4\">&lt;</span><span style=\"color: #8FBCBB\">string</span><span style=\"color: #ECEFF4\">&gt;</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #D8DEE9\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">y</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #4C566A\">// Error, because x and y are not compatible</span></code></div></pre>\n<p>In this way, a generic type that has its type arguments specified acts just like a non-generic type.</p>\n<p>For generic types that do not have their type arguments specified, compatibility is checked by specifying <code>any</code> in place of all unspecified type arguments.\nThe resulting types are then checked for compatibility, just as in the non-generic case.</p>\n<p>For example,</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">identity</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">function</span><span style=\"color: #ECEFF4\">&lt;</span><span style=\"color: #8FBCBB\">T</span><span style=\"color: #ECEFF4\">&gt;(</span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">T</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">T</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #ECEFF4\">    </span><span style=\"color: #4C566A\">// ...</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">reverse</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">function</span><span style=\"color: #ECEFF4\">&lt;</span><span style=\"color: #8FBCBB\">U</span><span style=\"color: #ECEFF4\">&gt;(</span><span style=\"color: #D8DEE9\">y</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">U</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">U</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #ECEFF4\">    </span><span style=\"color: #4C566A\">// ...</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #D8DEE9\">identity</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">reverse</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #4C566A\">// OK, because (x: any) =&gt; any matches (y: any) =&gt; any</span></code></div></pre>\n<h1 id=\"advanced-topics\"><a href=\"#advanced-topics\" aria-label=\"advanced topics permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Advanced Topics</h1>\n<h2 id=\"subtype-vs-assignment\"><a href=\"#subtype-vs-assignment\" aria-label=\"subtype vs assignment permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subtype vs Assignment</h2>\n<p>So far, we’ve used “compatible”, which is not a term defined in the language spec.\nIn TypeScript, there are two kinds of compatibility: subtype and assignment.\nThese differ only in that assignment extends subtype compatibility with rules to allow assignment to and from <code>any</code>, and to and from <code>enum</code> with corresponding numeric values.</p>\n<p>Different places in the language use one of the two compatibility mechanisms, depending on the situation.\nFor practical purposes, type compatibility is dictated by assignment compatibility, even in the cases of the <code>implements</code> and <code>extends</code> clauses.</p>\n<p>For more information, see the <a href=\"https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md\">TypeScript spec</a>.</p>","headings":[{"value":"Introduction","depth":1},{"value":"A Note on Soundness","depth":2},{"value":"Starting out","depth":1},{"value":"Comparing two functions","depth":1},{"value":"Function Parameter Bivariance","depth":2},{"value":"Optional Parameters and Rest Parameters","depth":2},{"value":"Functions with overloads","depth":2},{"value":"Enums","depth":1},{"value":"Classes","depth":1},{"value":"Private and protected members in classes","depth":2},{"value":"Generics","depth":1},{"value":"Advanced Topics","depth":1},{"value":"Subtype vs Assignment","depth":2}],"frontmatter":{"permalink":"/docs/handbook/type-compatibility.html","title":"Type Compatibility"}}},"pageContext":{"slug":"/docs/handbook/type-compatibility.html","isOldHandbook":true}}}