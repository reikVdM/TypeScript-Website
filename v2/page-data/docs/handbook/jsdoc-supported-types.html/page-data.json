{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/jsdoc-supported-types.html","result":{"data":{"markdownRemark":{"id":"b8ad4f68-00fe-5da8-bf2e-49ac8090efe3","excerpt":"The list below outlines which constructs are currently supported\nwhen using JSDoc annotations to provide type information in JavaScript files. Note any tags…","html":"<p>The list below outlines which constructs are currently supported\nwhen using JSDoc annotations to provide type information in JavaScript files.</p>\n<p>Note any tags which are not explicitly listed below (such as <code>@async</code>) are not yet supported.</p>\n<ul>\n<li><code>@type</code></li>\n<li><code>@param</code> (or <code>@arg</code> or <code>@argument</code>)</li>\n<li><code>@returns</code> (or <code>@return</code>)</li>\n<li><code>@typedef</code></li>\n<li><code>@callback</code></li>\n<li><code>@template</code></li>\n<li><code>@class</code> (or <code>@constructor</code>)</li>\n<li><code>@this</code></li>\n<li><code>@extends</code> (or <code>@augments</code>)</li>\n<li><code>@enum</code></li>\n</ul>\n<p>The meaning is usually the same, or a superset, of the meaning of the tag given at <a href=\"https://jsdoc.app\">jsdoc.app</a>.\nThe code below describes the differences and gives some example usage of each tag.</p>\n<h2 id=\"type\"><a href=\"#type\" aria-label=\"type permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@type</code></h2>\n<p>You can use the “@type” tag and reference a type name (either primitive, defined in a TypeScript declaration, or in a JSDoc “@typedef” tag).\nYou can use any Typescript type, and most JSDoc types.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {string}</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">s</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {Window} */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">win</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {PromiseLike&lt;string&gt;} */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">promisedString</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #4C566A\">// You can specify an HTML Element with DOM properties</span>\n<span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {HTMLElement} */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">myElement</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> document</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">querySelector</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">selector</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9\">element</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">dataset</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">myData</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">''</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p><code>@type</code> can specify a union type — for example, something can be either a string or a boolean.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {(string | boolean)}</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">sb</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>Note that parentheses are optional for union types.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {string | boolean}</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">sb</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>You can specify array types using a variety of syntaxes:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {number[]} */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">ns</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {Array.&lt;number&gt;} */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">nds</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {Array&lt;number&gt;} */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">nas</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>You can also specify object literal types.\nFor example, an object with properties ‘a’ (string) and ‘b’ (number) uses the following syntax:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {{ a: string, b: number }} */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">var9</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>You can specify map-like and array-like objects using string and number index signatures, using either standard JSDoc syntax or Typescript syntax.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * A map-like object that maps arbitrary `string` properties to `number`s.</span>\n<span style=\"color: #4C566A\"> *</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {Object.&lt;string, number&gt;}</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">stringToNumber</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {Object.&lt;number, object&gt;} */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">arrayLike</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>The preceding two types are equivalent to the Typescript types <code>{ [x: string]: number }</code> and <code>{ [x: number]: any }</code>. The compiler understands both syntaxes.</p>\n<p>You can specify function types using either Typescript or Closure syntax:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {function(string, boolean): number} Closure syntax */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">sbn</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {(s: string, b: boolean) =&gt; number} Typescript syntax */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">sbn2</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>Or you can just use the unspecified <code>Function</code> type:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {Function} */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">fn7</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {function} */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">fn6</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>Other types from Closure also work:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {*} - can be 'any' type</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">star</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {?} - unknown type (same as 'any')</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">question</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<h3 id=\"casts\"><a href=\"#casts\" aria-label=\"casts permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Casts</h3>\n<p>Typescript borrows cast syntax from Closure.\nThis lets you cast types to other types by adding a <code>@type</code> tag before any parenthesized expression.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {number | string}</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">numberOrString</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">Math</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">random</span><span style=\"color: #D8DEE9FF\">() </span><span style=\"color: #81A1C1\">&lt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0.5</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">?</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">hello</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">100</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">typeAssertedNumber</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {number} */</span><span style=\"color: #D8DEE9FF\"> (</span><span style=\"color: #D8DEE9\">numberOrString</span><span style=\"color: #D8DEE9FF\">)</span></code></div></pre>\n<h3 id=\"import-types\"><a href=\"#import-types\" aria-label=\"import types permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Import types</h3>\n<p>You can also import declarations from other files using import types.\nThis syntax is Typescript-specific and differs from the JSDoc standard:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> p { import(\"./a\").Pet }</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">walk</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">p</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">`</span><span style=\"color: #A3BE8C\">Walking </span><span style=\"color: #5E81AC\">${</span><span style=\"color: #D8DEE9\">p</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">name</span><span style=\"color: #5E81AC\">}</span><span style=\"color: #A3BE8C\">...</span><span style=\"color: #ECEFF4\">`</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<p>import types can also be used in type alias declarations:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@typedef</span><span style=\"color: #4C566A\"> { import(\"./a\").Pet } Pet</span>\n<span style=\"color: #4C566A\"> */</span>\n\n<span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {Pet}</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">myPet</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9\">myPet</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">name</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>import types can be used to get the type of a value from a module if you don’t know the type, or if it has a large type that is annoying to type:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {typeof import(\"./a\").x }</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">require</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">./a</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">x</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<h2 id=\"param-and-returns\"><a href=\"#param-and-returns\" aria-label=\"param and returns permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@param</code> and <code>@returns</code></h2>\n<p><code>@param</code> uses the same type syntax as <code>@type</code>, but adds a parameter name.\nThe parameter may also be declared optional by surrounding the name with square brackets:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">// Parameters may be declared in a variety of syntactic forms</span>\n<span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {string}  </span><span style=\"color: #D8DEE9\">p1</span><span style=\"color: #4C566A\"> - A string param.</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {string=} </span><span style=\"color: #D8DEE9\">p2</span><span style=\"color: #4C566A\"> - An optional param (Closure syntax)</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {string} </span><span style=\"color: #D8DEE9\">[p3]</span><span style=\"color: #4C566A\"> - Another optional param (JSDoc syntax).</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {string} [p4=\"test\"] - An optional param with a default value</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@return</span><span style=\"color: #4C566A\"> {string} This is the result</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">stringsStringStrings</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">p1</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">p2</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">p3</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">p4</span><span style=\"color: #ECEFF4\">){</span>\n<span style=\"color: #ECEFF4\">  </span><span style=\"color: #4C566A\">// TODO</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<p>Likewise, for the return type of a function:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@return</span><span style=\"color: #4C566A\"> {PromiseLike&lt;string&gt;}</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">ps</span><span style=\"color: #ECEFF4\">(){}</span>\n\n<span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@returns</span><span style=\"color: #4C566A\"> {{ a: string, b: number }} - May use '</span><span style=\"color: #8FBCBB\">@returns</span><span style=\"color: #4C566A\">' as well as '</span><span style=\"color: #8FBCBB\">@return</span><span style=\"color: #4C566A\">'</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">ab</span><span style=\"color: #ECEFF4\">(){}</span></code></div></pre>\n<h2 id=\"typedef-callback-and-param\"><a href=\"#typedef-callback-and-param\" aria-label=\"typedef callback and param permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@typedef</code>, <code>@callback</code>, and <code>@param</code></h2>\n<p><code>@typedef</code> may be used to define complex types.\nSimilar syntax works with <code>@param</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@typedef</span><span style=\"color: #4C566A\"> {Object} SpecialType - creates a new type named 'SpecialType'</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@property</span><span style=\"color: #4C566A\"> {string} prop1 - a string property of SpecialType</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@property</span><span style=\"color: #4C566A\"> {number} prop2 - a number property of SpecialType</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@property</span><span style=\"color: #4C566A\"> {number=} prop3 - an optional number property of SpecialType</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@prop</span><span style=\"color: #4C566A\"> {number} [prop4] - an optional number property of SpecialType</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@prop</span><span style=\"color: #4C566A\"> {number} [prop5=42] - an optional number property of SpecialType with default</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {SpecialType} */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">specialTypeObject</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>You can use either <code>object</code> or <code>Object</code> on the first line.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@typedef</span><span style=\"color: #4C566A\"> {object} SpecialType1 - creates a new type named 'SpecialType'</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@property</span><span style=\"color: #4C566A\"> {string} prop1 - a string property of SpecialType</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@property</span><span style=\"color: #4C566A\"> {number} prop2 - a number property of SpecialType</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@property</span><span style=\"color: #4C566A\"> {number=} prop3 - an optional number property of SpecialType</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {SpecialType1} */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">specialTypeObject1</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p><code>@param</code> allows a similar syntax for one-off type specifications.\nNote that the nested property names must be prefixed with the name of the parameter:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {Object} </span><span style=\"color: #D8DEE9\">options</span><span style=\"color: #4C566A\"> - The shape is the same as SpecialType above</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {string} </span><span style=\"color: #D8DEE9\">options.prop1</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {number} </span><span style=\"color: #D8DEE9\">options.prop2</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {number=} </span><span style=\"color: #D8DEE9\">options.prop3</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {number} </span><span style=\"color: #D8DEE9\">[options.prop4]</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {number} </span><span style=\"color: #D8DEE9\">[options.prop5=42]</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">special</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">options</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> (</span><span style=\"color: #D8DEE9\">options</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">prop4</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">||</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1001</span><span style=\"color: #D8DEE9FF\">) </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">options</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">prop5</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<p><code>@callback</code> is similar to <code>@typedef</code>, but it specifies a function type instead of an object type:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@callback</span><span style=\"color: #4C566A\"> Predicate</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {string} </span><span style=\"color: #D8DEE9\">data</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {number} </span><span style=\"color: #D8DEE9\">[index]</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@returns</span><span style=\"color: #4C566A\"> {boolean}</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {Predicate} */</span>\n<span style=\"color: #81A1C1\">const</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">ok</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">s</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">!</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #8FBCBB\">s</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">length </span><span style=\"color: #81A1C1\">%</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">2</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>Of course, any of these types can be declared using Typescript syntax in a single-line <code>@typedef</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@typedef</span><span style=\"color: #4C566A\"> {{ prop1: string, prop2: string, prop3?: number }} SpecialType */</span>\n<span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@typedef</span><span style=\"color: #4C566A\"> {(data: string, index?: number) =&gt; boolean} Predicate */</span></code></div></pre>\n<h2 id=\"template\"><a href=\"#template\" aria-label=\"template permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@template</code></h2>\n<p>You can declare generic functions with the <code>@template</code> tag:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@template</span><span style=\"color: #4C566A\"> T</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {T} </span><span style=\"color: #D8DEE9\">p1</span><span style=\"color: #4C566A\"> - A generic parameter that flows through to the return type</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@return</span><span style=\"color: #4C566A\"> {T}</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">id</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #ECEFF4\">){</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<p>Use comma or multiple tags to declare multiple type parameters:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@template</span><span style=\"color: #4C566A\"> T,U,V</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@template</span><span style=\"color: #4C566A\"> W,X</span>\n<span style=\"color: #4C566A\"> */</span></code></div></pre>\n<p>You can also specify a type constraint before the type parameter name.\nOnly the first type parameter in a list is constrained:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@template</span><span style=\"color: #4C566A\"> {string} K - K must be a string or string literal</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@template</span><span style=\"color: #4C566A\"> {{ serious(): string }} Seriousalizable - must have a serious method</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {K} </span><span style=\"color: #D8DEE9\">key</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {Seriousalizable} </span><span style=\"color: #D8DEE9\">object</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">seriousalize</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">key</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">object</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #ECEFF4\">  </span><span style=\"color: #4C566A\">// ????</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<p>Declaring generic classes or types is unsupported.</p>\n<h2 id=\"classes\"><a href=\"#classes\" aria-label=\"classes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Classes</h2>\n<p>Classes can be declared as ES6 classes.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">C</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\">   * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {number} </span><span style=\"color: #D8DEE9\">data</span>\n<span style=\"color: #4C566A\">   */</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #81A1C1\">constructor</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #ECEFF4\">    </span><span style=\"color: #4C566A\">// property types can be inferred</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">name </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">foo</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #ECEFF4\">    </span><span style=\"color: #4C566A\">// or set explicitly</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {string | null} */</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">title </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">null;</span>\n\n<span style=\"color: #ECEFF4\">    </span><span style=\"color: #4C566A\">// or simply annotated, if they're set elsewhere</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {number} */</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">size</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">initialize</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// Should error, initializer expects a string</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\">  * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {string} </span><span style=\"color: #D8DEE9\">s</span>\n<span style=\"color: #4C566A\">  */</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">initialize</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">s</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">size </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">s</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">length</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">c</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">new</span><span style=\"color: #D8DEE9FF\"> C(</span><span style=\"color: #B48EAD\">0</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">result</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">C</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #B48EAD\">1</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// C should only be called with new</span></code></div></pre>\n<p>They can also be declared as constructor functions, as described in the next section:</p>\n<h2 id=\"constructor\"><a href=\"#constructor\" aria-label=\"constructor permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@constructor</code></h2>\n<p>The compiler infers constructor functions based on this-property assignments, but you can make checking stricter and suggestions better if you add a <code>@constructor</code> tag:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@constructor</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {number} </span><span style=\"color: #D8DEE9\">data</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">C</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #ECEFF4\">  </span><span style=\"color: #4C566A\">// property types can be inferred</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">name </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">foo</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #ECEFF4\">  </span><span style=\"color: #4C566A\">// or set explicitly</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {string | null} */</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">title </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">null;</span>\n\n<span style=\"color: #ECEFF4\">  </span><span style=\"color: #4C566A\">// or simply annotated, if they're set elsewhere</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {number} */</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">size</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">initialize</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// Should error, initializer expects a string</span>\n<span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {string} </span><span style=\"color: #D8DEE9\">s</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #8FBCBB\">C</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">prototype</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">initialize</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">s</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">size </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">s</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">length</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">c</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">new</span><span style=\"color: #D8DEE9FF\"> C(</span><span style=\"color: #B48EAD\">0</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">result</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">C</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #B48EAD\">1</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// C should only be called with new</span></code></div></pre>\n<p>With <code>@constructor</code>, <code>this</code> is checked inside the constructor function <code>C</code>, so you will get suggestions for the <code>initialize</code> method and an error if you pass it a number. You will also get an error if you call <code>C</code> instead of constructing it.</p>\n<p>Unfortunately, this means that constructor functions that are also callable cannot use <code>@constructor</code>.</p>\n<h2 id=\"this\"><a href=\"#this\" aria-label=\"this permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@this</code></h2>\n<p>The compiler can usually figure out the type of <code>this</code> when it has some context to work with. When it doesn’t, you can explicitly specify the type of <code>this</code> with <code>@this</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@this</span><span style=\"color: #4C566A\"> {HTMLElement}</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {*} </span><span style=\"color: #D8DEE9\">e</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">callbackForLater</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">e</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">clientHeight</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">parseInt</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">e</span><span style=\"color: #D8DEE9FF\">) </span><span style=\"color: #4C566A\">// should be fine!</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<h2 id=\"extends\"><a href=\"#extends\" aria-label=\"extends permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@extends</code></h2>\n<p>When Javascript classes extend a generic base class, there is nowhere to specify what the type parameter should be. The <code>@extends</code> tag provides a place for that type parameter:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@template</span><span style=\"color: #4C566A\"> T</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@extends</span><span style=\"color: #4C566A\"> {Set&lt;T&gt;}</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">SortableSet</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">extends</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Set</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #ECEFF4\">  </span><span style=\"color: #4C566A\">// ...</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<p>Note that <code>@extends</code> only works with classes. Currently, there is no way for a constructor function extend a class.</p>\n<h2 id=\"enum\"><a href=\"#enum\" aria-label=\"enum permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>@enum</code></h2>\n<p>The <code>@enum</code> tag allows you to create an object literal whose members are all of a specified type. Unlike most object literals in Javascript, it does not allow other members.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@enum</span><span style=\"color: #4C566A\"> {number} */</span>\n<span style=\"color: #81A1C1\">const</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">JSDocState</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">BeginningOfLine</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">SawAsterisk</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">SavingComments</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">2</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<p>Note that <code>@enum</code> is quite different from, and much simpler than, Typescript’s <code>enum</code>. However, unlike Typescript’s enums, <code>@enum</code> can have any type:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/** </span><span style=\"color: #8FBCBB\">@enum</span><span style=\"color: #4C566A\"> {function(number): number} */</span>\n<span style=\"color: #81A1C1\">const</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Math</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">add1</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">n</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">n</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">id</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">n</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">-</span><span style=\"color: #D8DEE9\">n</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">sub1</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">n</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">n</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">-</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<h2 id=\"more-examples\"><a href=\"#more-examples\" aria-label=\"more examples permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More examples</h2>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">someObj</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\">   * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {string} </span><span style=\"color: #D8DEE9\">param1</span><span style=\"color: #4C566A\"> - Docs on property assignments work</span>\n<span style=\"color: #4C566A\">   */</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">x</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">function</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">param1</span><span style=\"color: #ECEFF4\">){}</span>\n<span style=\"color: #ECEFF4\">}</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * As do docs on variable assignments</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@return</span><span style=\"color: #4C566A\"> {Window}</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">someFunc</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">function</span><span style=\"color: #ECEFF4\">(){}</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * And class methods</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {string} </span><span style=\"color: #D8DEE9\">greeting</span><span style=\"color: #4C566A\"> The greeting to use</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #8FBCBB\">Foo</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">prototype</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">sayHi</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">greeting</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Hi!</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * And arrow functions expressions</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {number} </span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #4C566A\"> - A multiplier</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">myArrow</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">*</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * Which means it works for stateless function components in JSX too</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {{a: string, b: number}} test - Some param</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">sfc</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">test</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">&lt;div&gt;{</span><span style=\"color: #8FBCBB\">test</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #8FBCBB\">a</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">charAt</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #B48EAD\">0</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">}&lt;/div&gt;;</span>\n\n<span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * A parameter can be a class constructor, using Closure syntax.</span>\n<span style=\"color: #4C566A\"> *</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {{new(...args: any[]): object}} C - The class to register</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">registerClass</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">C</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{}</span>\n\n<span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {...string} </span><span style=\"color: #D8DEE9\">p1</span><span style=\"color: #4C566A\"> - A 'rest' arg (array) of strings. (treated as 'any')</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">fn10</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">p1</span><span style=\"color: #ECEFF4\">){}</span>\n\n<span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@param</span><span style=\"color: #4C566A\"> {...string} </span><span style=\"color: #D8DEE9\">p1</span><span style=\"color: #4C566A\"> - A 'rest' arg (array) of strings. (treated as 'any')</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">fn9</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">p1</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">p1</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">join</span><span style=\"color: #D8DEE9FF\">()</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<h2 id=\"patterns-that-are-known-not-to-be-supported\"><a href=\"#patterns-that-are-known-not-to-be-supported\" aria-label=\"patterns that are known not to be supported permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Patterns that are known NOT to be supported</h2>\n<p>Referring to objects in the value space as types doesn’t work unless the object also creates a type, like a constructor function.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">aNormalFunction</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n\n<span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {aNormalFunction}</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">wrong</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * Use 'typeof' instead:</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {typeof aNormalFunction}</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">right</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>Postfix equals on a property type in an object literal type doesn’t specify an optional property:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {{ a: string, b: number= }}</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">wrong</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * Use postfix question on the property name instead:</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {{ a: string, b?: number }}</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">right</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>Nullable types only have meaning if <code>strictNullChecks</code> is on:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {?number}</span>\n<span style=\"color: #4C566A\"> * With strictNullChecks: true  -- number | null</span>\n<span style=\"color: #4C566A\"> * With strictNullChecks: false -- number</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">nullable</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>You can also use a union type:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {number | null}</span>\n<span style=\"color: #4C566A\"> * With strictNullChecks: true  -- number | null</span>\n<span style=\"color: #4C566A\"> * With strictNullChecks: false -- number</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">unionNullable</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>Non-nullable types have no meaning and are treated just as their original type:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * </span><span style=\"color: #8FBCBB\">@type</span><span style=\"color: #4C566A\"> {!number}</span>\n<span style=\"color: #4C566A\"> * Just has type number</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">normal</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<p>Unlike JSDoc’s type system, Typescript only allows you to mark types as containing null or not.\nThere is no explicit non-nullability — if strictNullChecks is on, then <code>number</code> is not nullable.\nIf it is off, then <code>number</code> is nullable.</p>\n<h3 id=\"unsupported-tags\"><a href=\"#unsupported-tags\" aria-label=\"unsupported tags permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unsupported tags</h3>\n<p>TypeScript ignores any unsupported JSDoc tags.</p>\n<p>The following tags have open issues to support them:</p>\n<ul>\n<li><code>@const</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/19672\">issue #19672</a>)</li>\n<li><code>@inheritdoc</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/23215\">issue #23215</a>)</li>\n<li><code>@memberof</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/7237\">issue #7237</a>)</li>\n<li><code>@readonly</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/17233\">issue #17233</a>)</li>\n<li><code>@yields</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/23857\">issue #23857</a>)</li>\n<li><code>{@link …}</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/16498\">issue #16498</a>)</li>\n</ul>","headings":[{"value":"@type","depth":2},{"value":"Casts","depth":3},{"value":"Import types","depth":3},{"value":"@param and @returns","depth":2},{"value":"@typedef, @callback, and @param","depth":2},{"value":"@template","depth":2},{"value":"Classes","depth":2},{"value":"@constructor","depth":2},{"value":"@this","depth":2},{"value":"@extends","depth":2},{"value":"@enum","depth":2},{"value":"More examples","depth":2},{"value":"Patterns that are known NOT to be supported","depth":2},{"value":"Unsupported tags","depth":3}],"frontmatter":{"permalink":"/docs/handbook/jsdoc-supported-types.html","title":"JSDoc Supported Types"}}},"pageContext":{"slug":"/docs/handbook/jsdoc-supported-types.html","isOldHandbook":true}}}