{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/enums.html","result":{"data":{"markdownRemark":{"id":"c1f1ebbe-8854-5b29-aad4-e496887c5d31","excerpt":"Enums Enums allow us to define a set of named constants.\nUsing enums can make it easier to document intent, or create a set of distinct cases.\nTypeScript…","html":"<h1 id=\"enums\"><a href=\"#enums\" aria-label=\"enums permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enums</h1>\n<p>Enums allow us to define a set of named constants.\nUsing enums can make it easier to document intent, or create a set of distinct cases.\nTypeScript provides both numeric and string-based enums.</p>\n<h2 id=\"numeric-enums\"><a href=\"#numeric-enums\" aria-label=\"numeric enums permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Numeric enums</h2>\n<p>We’ll first start off with numeric enums, which are probably more familiar if you’re coming from other languages.\nAn enum can be defined using the <code>enum</code> keyword.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Direction</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Up</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Down</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Left</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Right</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<p>Above, we have a numeric enum where <code>Up</code> is initialized with <code>1</code>.\nAll of the following members are auto-incremented from that point on.\nIn other words, <code>Direction.Up</code> has the value <code>1</code>,  <code>Down</code> has <code>2</code>, <code>Left</code> has <code>3</code>, and <code>Right</code> has <code>4</code>.</p>\n<p>If we wanted, we could leave off the initializers entirely:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Direction</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Up</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Down</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Left</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Right</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<p>Here, <code>Up</code> would have the value <code>0</code>, <code>Down</code> would have <code>1</code>, etc.\nThis auto-incrementing behavior is useful for cases where we might not care about the member values themselves, but do care that each value is distinct from other values in the same enum.</p>\n<p>Using an enum is simple: just access any member as a property off of the enum itself, and declare types using the name of the enum:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Response</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">No</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Yes</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">respond</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">recipient</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">string</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">message</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Response</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">void</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #ECEFF4\">    </span><span style=\"color: #4C566A\">// ...</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #88C0D0\">respond</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">Princess Caroline</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Response</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">Yes</span><span style=\"color: #D8DEE9FF\">)</span></code></div></pre>\n<p>Numeric enums can be mixed in <a href=\"#computed-and-constant-members\">computed and constant members (see below)</a>.\nThe short story is, enums without initializers either need to be first, or have to come after numeric enums initialized with numeric constants or other constant enum members.\nIn other words, the following isn’t allowed:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">E</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">A</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">getSomeValue</span><span style=\"color: #D8DEE9FF\">()</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">B</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// Error! Enum member must have initializer.</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<h2 id=\"string-enums\"><a href=\"#string-enums\" aria-label=\"string enums permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String enums</h2>\n<p>String enums are a similar concept, but have some subtle <a href=\"#enums-at-runtime\">runtime differences</a> as documented below.\nIn a string enum, each member has to be constant-initialized with a string literal, or with another string enum member.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Direction</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Up</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">UP</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Down</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">DOWN</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Left</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">LEFT</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Right</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">RIGHT</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<p>While string enums don’t have auto-incrementing behavior, string enums have the benefit that they “serialize” well.\nIn other words, if you were debugging and had to read the runtime value of a numeric enum, the value is often opaque - it doesn’t convey any useful meaning on its own (though <a href=\"#enums-at-runtime\">reverse mapping</a> can often help), string enums allow you to give a meaningful and readable value when your code runs, independent of the name of the enum member itself.</p>\n<h2 id=\"heterogeneous-enums\"><a href=\"#heterogeneous-enums\" aria-label=\"heterogeneous enums permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Heterogeneous enums</h2>\n<p>Technically enums can be mixed with string and numeric members, but it’s not clear why you would ever want to do so:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">BooleanLikeHeterogeneousEnum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">No</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Yes</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">YES</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<p>Unless you’re really trying to take advantage of JavaScript’s runtime behavior in a clever way, it’s advised that you don’t do this.</p>\n<h2 id=\"computed-and-constant-members\"><a href=\"#computed-and-constant-members\" aria-label=\"computed and constant members permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Computed and constant members</h2>\n<p>Each enum member has a value associated with it which can be either <em>constant</em> or <em>computed</em>.\nAn enum member is considered constant if:</p>\n<ul>\n<li>\n<p>It is the first member in the enum and it has no initializer, in which case it’s assigned the value <code>0</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #4C566A\">// E.X is constant:</span>\n<span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">E</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">X</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">}</span></code></div></pre>\n</li>\n<li>\n<p>It does not have an initializer and the preceding enum member was a <em>numeric</em> constant.\nIn this case the value of the current enum member will be the value of the preceding enum member plus one.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #4C566A\">// All enum members in 'E1' and 'E2' are constant.</span>\n\n<span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">E1</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">X</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Y</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Z</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">E2</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #D8DEE9\">A</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">B</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">C</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n</li>\n<li>\n<p>The enum member is initialized with a constant enum expression.\nA constant enum expression is a subset of TypeScript expressions that can be fully evaluated at compile time.\nAn expression is a constant enum expression if it is:</p>\n<ol>\n<li>a literal enum expression (basically a string literal or a numeric literal)</li>\n<li>a reference to previously defined constant enum member (which can originate from a different enum)</li>\n<li>a parenthesized constant enum expression</li>\n<li>one of the <code>+</code>, <code>-</code>, <code>~</code> unary operators applied to constant enum expression</li>\n<li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>&#x3C;&#x3C;</code>, <code>>></code>, <code>>>></code>, <code>&#x26;</code>, <code>|</code>, <code>^</code> binary operators with constant enum expressions as operands</li>\n</ol>\n<p>It is a compile time error for constant enum expressions to be evaluated to <code>NaN</code> or <code>Infinity</code>.</p>\n</li>\n</ul>\n<p>In all other cases enum member is considered computed.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">FileAccess</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #ECEFF4\">    </span><span style=\"color: #4C566A\">// constant members</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">None</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Read</span><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">&lt;&lt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Write</span><span style=\"color: #D8DEE9FF\">   </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">&lt;&lt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">2</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">ReadWrite</span><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Read</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">|</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Write</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #ECEFF4\">    </span><span style=\"color: #4C566A\">// computed member</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">G</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">123</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">length</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<h2 id=\"union-enums-and-enum-member-types\"><a href=\"#union-enums-and-enum-member-types\" aria-label=\"union enums and enum member types permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union enums and enum member types</h2>\n<p>There is a special subset of constant enum members that aren’t calculated: literal enum members.\nA literal enum member is a constant enum member with no initialized value, or with values that are initialized to</p>\n<ul>\n<li>any string literal (e.g. <code>\"foo\"</code>, <code>\"bar</code>, <code>\"baz\"</code>)</li>\n<li>any numeric literal (e.g. <code>1</code>, <code>100</code>)</li>\n<li>a unary minus applied to any numeric literal (e.g. <code>-1</code>, <code>-100</code>)</li>\n</ul>\n<p>When all members in an enum have literal enum values, some special semantics come to play.</p>\n<p>The first is that enum members also become types as well!\nFor example, we can say that certain members can <em>only</em> have the value of an enum member:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">ShapeKind</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Circle</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Square</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">interface</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Circle</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    kind</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">ShapeKind</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #8FBCBB\">Circle</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">    radius</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">interface</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Square</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    kind</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">ShapeKind</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #8FBCBB\">Square</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">    sideLength</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">c</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Circle</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">kind</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">ShapeKind</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">Square</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// Error! Type 'ShapeKind.Square' is not assignable to type 'ShapeKind.Circle'.</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">radius</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">100</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<p>The other change is that enum types themselves effectively become a <em>union</em> of each enum member.\nWhile we haven’t discussed <a href=\"./Advanced%20Types.md#union-types\">union types</a> yet, all that you need to know is that with union enums, the type system is able to leverage the fact that it knows the exact set of values that exist in the enum itself.\nBecause of that, TypeScript can catch silly bugs where we might be comparing values incorrectly.\nFor example:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">E</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Foo</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Bar</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">f</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">E</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">if</span><span style=\"color: #D8DEE9FF\"> (</span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">!==</span><span style=\"color: #D8DEE9FF\"> E</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">Foo</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">||</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">x</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">!==</span><span style=\"color: #D8DEE9FF\"> E</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">Bar</span><span style=\"color: #D8DEE9FF\">) </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #ECEFF4\">        </span><span style=\"color: #4C566A\">//             ~~~~~~~~~~~</span>\n<span style=\"color: #ECEFF4\">        </span><span style=\"color: #4C566A\">// Error! This condition will always return 'true' since the types 'E.Foo' and 'E.Bar' have no overlap.</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<p>In that example, we first checked whether <code>x</code> was <em>not</em> <code>E.Foo</code>.\nIf that check succeeds, then our <code>||</code> will short-circuit, and the body of the ‘if’ will run.\nHowever, if the check didn’t succeed, then <code>x</code> can <em>only</em> be <code>E.Foo</code>, so it doesn’t make sense to see whether it’s equal to <code>E.Bar</code>.</p>\n<h2 id=\"enums-at-runtime\"><a href=\"#enums-at-runtime\" aria-label=\"enums at runtime permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enums at runtime</h2>\n<p>Enums are real objects that exist at runtime.\nFor example, the following enum</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">E</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">X</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Y</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Z</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<p>can actually be passed around to functions</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">f</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">obj</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span><span style=\"color: #D8DEE9FF\"> X</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">})</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">obj</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">X</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #4C566A\">// Works, since 'E' has a property named 'X' which is a number.</span>\n<span style=\"color: #88C0D0\">f</span><span style=\"color: #D8DEE9FF\">(E)</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<h2 id=\"enums-at-compile-time\"><a href=\"#enums-at-compile-time\" aria-label=\"enums at compile time permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enums at compile time</h2>\n<p>Even though Enums are real objects that exist at runtime, the <code>keyof</code> keyword works differently than you might expect for typical objects. Instead, use <code>keyof typeof</code> to get a Type that represents all Enum keys as strings.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">LogLevel</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">ERROR</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">WARN</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">INFO</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">DEBUG</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #4C566A\">/**</span>\n<span style=\"color: #4C566A\"> * This is equivalent to:</span>\n<span style=\"color: #4C566A\"> * type LogLevelStrings = 'ERROR' | 'WARN' | 'INFO' | 'DEBUG';</span>\n<span style=\"color: #4C566A\"> */</span>\n<span style=\"color: #81A1C1\">type</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">LogLevelStrings</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">keyof</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">typeof</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">LogLevel</span><span style=\"color: #81A1C1\">;</span>\n\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">printImportant</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">key</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">LogLevelStrings</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">message</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">string</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">const</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">num</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">LogLevel</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #D8DEE9\">key</span><span style=\"color: #D8DEE9FF\">]</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">if</span><span style=\"color: #D8DEE9FF\"> (</span><span style=\"color: #D8DEE9\">num</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">&lt;=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">LogLevel</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">WARN) </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">       </span><span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">Log level key is: </span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">key</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">       </span><span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">Log level value is: </span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">num</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">       </span><span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">Log level message is: </span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">message</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #88C0D0\">printImportant</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">ERROR</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">This is a message</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<h3 id=\"reverse-mappings\"><a href=\"#reverse-mappings\" aria-label=\"reverse mappings permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reverse mappings</h3>\n<p>In addition to creating an object with property names for members, numeric enums members also get a <em>reverse mapping</em> from enum values to enum names.\nFor example, in this example:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">A</span>\n<span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">a</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Enum</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">A</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">nameOfA</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Enum</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #D8DEE9\">a</span><span style=\"color: #D8DEE9FF\">]</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// \"A\"</span></code></div></pre>\n<p>TypeScript might compile this down to something like the the following JavaScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Enum</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">Enum</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Enum</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #D8DEE9\">Enum</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">A</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\">] </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span><span style=\"color: #D8DEE9FF\">] </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">A</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #ECEFF4\">}</span><span style=\"color: #D8DEE9FF\">)(</span><span style=\"color: #D8DEE9\">Enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">||</span><span style=\"color: #D8DEE9FF\"> (</span><span style=\"color: #D8DEE9\">Enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{}</span><span style=\"color: #D8DEE9FF\">))</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">a</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Enum</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">A</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">nameOfA</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Enum</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #D8DEE9\">a</span><span style=\"color: #D8DEE9FF\">]</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// \"A\"</span></code></div></pre>\n<p>In this generated code, an enum is compiled into an object that stores both forward (<code>name</code> -> <code>value</code>) and reverse (<code>value</code> -> <code>name</code>) mappings.\nReferences to other enum members are always emitted as property accesses and never inlined.</p>\n<p>Keep in mind that string enum members <em>do not</em> get a reverse mapping generated at all.</p>\n<h3 id=\"const-enums\"><a href=\"#const-enums\" aria-label=\"const enums permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>const</code> enums</h3>\n<p>In most cases, enums are a perfectly valid solution.\nHowever sometimes requirements are tighter.\nTo avoid paying the cost of extra generated code and additional indirection when accessing enum values, it’s possible to use <code>const</code> enums.\nConst enums are defined using the <code>const</code> modifier on our enums:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">const</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">A</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">B</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> A </span><span style=\"color: #81A1C1\">*</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">2</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<p>Const enums can only use constant enum expressions and unlike regular enums they are completely removed during compilation.\nConst enum members are inlined at use sites.\nThis is possible since const enums cannot have computed members.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">const</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Directions</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Up</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Down</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Left</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">Right</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">directions</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> [</span><span style=\"color: #D8DEE9\">Directions</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">Up</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Directions</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">Down</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Directions</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">Left</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">Directions</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">Right</span><span style=\"color: #D8DEE9FF\">]</span></code></div></pre>\n<p>in generated code will become</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">directions</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> [</span><span style=\"color: #B48EAD\">0</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">/* Up */</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">/* Down */</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">2</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">/* Left */</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">3</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">/* Right */</span><span style=\"color: #D8DEE9FF\">]</span><span style=\"color: #81A1C1\">;</span></code></div></pre>\n<h2 id=\"ambient-enums\"><a href=\"#ambient-enums\" aria-label=\"ambient enums permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ambient enums</h2>\n<p>Ambient enums are used to describe the shape of already existing enum types.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #81A1C1\">declare</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Enum</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">A</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">B</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">C</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">2</span>\n<span style=\"color: #ECEFF4\">}</span></code></div></pre>\n<p>One important difference between ambient and non-ambient enums is that, in regular enums, members that don’t have an initializer will be considered constant if its preceding enum member is considered constant.\nIn contrast, an ambient (and non-const) enum member that does not have initializer is <em>always</em> considered computed.</p>","headings":[{"value":"Enums","depth":1},{"value":"Numeric enums","depth":2},{"value":"String enums","depth":2},{"value":"Heterogeneous enums","depth":2},{"value":"Computed and constant members","depth":2},{"value":"Union enums and enum member types","depth":2},{"value":"Enums at runtime","depth":2},{"value":"Enums at compile time","depth":2},{"value":"Reverse mappings","depth":3},{"value":"const enums","depth":3},{"value":"Ambient enums","depth":2}],"frontmatter":{"permalink":"/docs/handbook/enums.html","title":"Enums"}}},"pageContext":{"slug":"/docs/handbook/enums.html","isOldHandbook":true}}}